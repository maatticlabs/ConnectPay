// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BiometricInterface
@_exported import BiometricInterface
import ConnectPayBase
import Foundation
import LocalAuthentication
import Swift
import UIKit
import _Concurrency
public typealias PolicyDomainState = Foundation.Data
public enum BiometricType {
  case touchID
  case faceID
  case none
  public static func == (a: BiometricInterface.BiometricType, b: BiometricInterface.BiometricType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class BiometricAuthenticationService {
  public init()
  final public func authenticate(resultHandler: @escaping (Swift.Result<BiometricInterface.PolicyDomainState, Swift.Error>) -> Swift.Void)
  final public var biometricType: LocalAuthentication.LABiometryType {
    get
  }
  final public func prepareBioAuth() throws -> Swift.Bool
  @objc deinit
}
public enum BioAuthError : Swift.Error, Foundation.LocalizedError {
  case userCancel
  case userNeedPassword
  case bioAuthNotEnabled
  case bioAuthNeedReregister
  case unknown
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: BiometricInterface.BioAuthError, b: BiometricInterface.BioAuthError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class BiometricAuthenticationProvider {
  public init()
  final public var biometricType: BiometricInterface.BiometricType {
    get
  }
  final public var isEnabled: Swift.Bool {
    get
  }
  final public func register(encryptedPassword: ConnectPayBase.EncryptedString, resultHandler: @escaping (Swift.Result<BiometricInterface.PolicyDomainState, Swift.Error>) -> Swift.Void)
  final public func authenticate(resultHandler: @escaping (Swift.Result<ConnectPayBase.EncryptedString, Swift.Error>) -> Swift.Void)
  final public func delete(resultHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
final public class BiometricAuthAppBridge : ConnectPayBase.AppBridgeType {
  final public var name: Swift.String
  public init(service: BiometricInterface.BiometricAuthenticationService = BiometricAuthenticationService())
  final public func handle(controller: BiometricInterface.BiometricAuthAppBridge.Controller, body: [Swift.String : Any], onSuccess: BiometricInterface.BiometricAuthAppBridge.SuccessHandler?, onError: BiometricInterface.BiometricAuthAppBridge.FailureHandler?)
  @objc deinit
}
extension BiometricInterface.BiometricType : Swift.Equatable {}
extension BiometricInterface.BiometricType : Swift.Hashable {}
extension BiometricInterface.BioAuthError : Swift.Equatable {}
extension BiometricInterface.BioAuthError : Swift.Hashable {}
